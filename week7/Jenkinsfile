container('gradle'){

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Jar') {
            when {
                allOf {
                    branch 'feature'
                    not {
                        changeRequest()
                    }
                }
            }
            steps {
                sh 'chmod +x gradlew'
                sh './gradlew build'
            }
        }

        stage('Unit Test') {
            when {
                allOf {
                    branch 'feature'
                    not {
                        changeRequest()
                    }
                }
            }
            steps {
                try {
                    sh './gradlew test'
                } catch (Exception e) {
                    currentBuild.result = 'FAILURE'
                    throw e
                }
            }
        }

        stage('Code Coverage') {
            when {
                allOf {
                    branch 'master'
                    not {
                        changeRequest()
                    }
                }
            }
            steps {
                try {
                    sh './gradlew jacocoTestCoverageVerification'
                    sh './gradlew jacocoTestReport'
                } catch (Exception e) {
                    currentBuild.result = 'FAILURE'
                    throw e
                }
            }
        }

        stage('Code Checkstyle') {
            when {
                allOf {
                    branch 'master'
                    not {
                        changeRequest()
                    }
                }
            }
            steps {
                try {
                    sh './gradlew checkstyleMain'
                } catch (Exception e) {
                    currentBuild.result = 'FAILURE'
                    throw e
                }
            }
        }

        stage('Build Container') {
            when {
                allOf {
                    branch 'feature'
                    not {
                        changeRequest()
                    }
                    not {
                        branch 'playground'
                    }
                    not {
                        environment name: 'BUILD_FAILED', value: 'true'
                    }
                }
            }
            steps {
                script {
                    def imageVersion = '0.1'
                    def imageName = 'calculator-feature'

                    if (env.BRANCH_NAME == 'master') {
                        imageVersion = '1.0'
                        imageName = 'calculator'
                    }

                    sh 'docker build -t ' + imageName + ':' + imageVersion + ' .'
                    sh 'docker push ' + imageName + ':' + imageVersion
                }
            }
        }
    }

