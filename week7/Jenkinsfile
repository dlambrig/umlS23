pipeline {
    agent any
    
    stages {
        stage('Build') {
            when {
                // Trigger when a new feature branch PR is created
                expression { env.CHANGE_TARGET ==~ /^refs\/pull\/\d+\/merge$/ }
            }
            steps {
                sh './gradlew build'
            }
        }
        stage('Test') {
            when {
                // Run on all branches except the playground branch
                not { branch 'playground' }
            }
            steps {
                // Run all tests on the feature branch except for jacocoTestCoverageVerification
                if (env.BRANCH_NAME == 'feature') {
                    sh './gradlew checkstyleMain jacocoTestReport test'
                } else {
                    sh './gradlew checkstyleMain jacocoTestCoverageVerification jacocoTestReport test'
                }
            }
        }
        stage('Build Container') {
            when {
                // Only build the container if the build was successful, and not on the playground branch
                not { branch 'playground' }
                allOf {
                    expression { currentBuild.result == 'SUCCESS' }
                    not { branch 'feature' }
                }
            }
            steps {
                script {
                    def imageName = env.BRANCH_NAME == 'master' ? 'calculator' : 'calculator-feature'
                    def version = env.BRANCH_NAME == 'master' ? '1.0' : '0.1'
                    def imageFullName = "repository/${imageName}:${version}"
                    try {
                        sh "docker build -t ${imageFullName} ."
                    } catch (err) {
                        println "Failed to build docker image"
                    }
                }
            }
        }
    }
}
