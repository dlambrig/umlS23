def calculatorImage = ''
def version = ''

pipeline {
    agent none
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    stages {
        stage('Build and test') {
            parallel {
                stage('Main branch') {
                    when {
                        branch 'main'
                    }
                    agent { label 'main' }
                    steps {
                        sh './gradlew checkstyleMain'
                        sh './gradlew jacocoTestCoverageVerification'
                        sh './gradlew jacocoTestReport'
                        sh './gradlew test'
                    }
                }
                stage('Feature branch') {
                    when {
                        branch 'feature'
                    }
                    agent { label 'main' }
                    steps {
                        sh './gradlew checkstyleMain'
                        sh './gradlew test'
                    }
                }
                stage('Playground branch') {
                    when {
                        branch 'playground'
                    }
                    agent { label 'main' }
                    steps {
                        echo 'Not running tests for playground branch'
                    }
                }
            }
        }

        stage('Build container') {
            when {
                allOf {
                    expression { currentBuild.result == 'SUCCESS' }
                    not { branch 'playground' }
                }
            }
            steps {
                script {
                    if (env.BRANCH_NAME == 'feature') {
                        calculatorImage = 'calculator-feature'
                        version = '0.1'
                    } else {
                        calculatorImage = 'calculator'
                        version = '1.0'
                    }
                    docker.build("${env.DOCKER_REGISTRY}/${calculatorImage}:${version}")
                }
            }
        }
    }
}
